@ variable
let my_variable = "hey"

@ function
@ block-scoped variables use the $identifier syntax
let my_func = ($arg) do
    writeln $arg
    $arg

@    the last expression in a function is it returns
@        you can also use an explicity return if you want to return early
@        if you want to return none, you should use a syntax like:
@            $arg|ignore    
end

my_func("cool")
my_func("nolang")

@ there isn't any if/else in nolang, you should use match instead
case my_variable
    "hello": writeln "hello";
    "bye": writeln "bye";
    _: writeln "not recognized word";
end

case my_variable as $var
    $var.is_cool(): writeln "it's cool";
    $var.is_bad(): do
        writeln "just testing";
    end;
    _: writeln "it's a normal variable";
end

@ some considerations about match:
@    * `_` is an "catch'em all", if nothing matches, it will execute the `_` block
@    * It should be exaustive, something needs to match, if there is a not-covered case, it will
@        throws an error and the code will not run
@    * If you want to create a block inside the match, you should use `do`...`end`, like on the
@        abouve code
@    * the `as` keyword create a variable scoped inside the match, like in functions,
@        you access them using the $identifier syntax

@ for statements:
for $i in range(1, 200) do
    writeln $i
end

@ usage, simple is_odd program

let is_odd = ($number) do
    $number % 2 == 1
end

for $i in range(1, 200) do
    writeln is_odd($i)
end
